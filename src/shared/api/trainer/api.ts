/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Trainer API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  AttachToTrainingRequest,
  AttachToTrainingResponse,
  CreateGroups200,
  CreateGroupsDto,
  CreateGyms200,
  CreateGymsDto,
  CreateSubscriptions,
  CreateSubscriptions200,
  CreateTrainerProfileRequest,
  CreateTrainingResponse,
  CreateTrainings200,
  CreateTrainingsRequest,
  InvalidInputResponse,
  InvalidTokenResponse,
  InvalidTrainingAccessResponse,
  PersistContactInformation,
  PersistContactInformation200,
  ProfileExistsResponse,
  ProfileNotFoundResponse,
  ScanAndCreateRequest,
  ScanTraineeRequest,
  ScanTraineeResponse,
  TraineeNotFoundResponse,
  TrainerProfile,
  TrainerProfileId,
} from "./types";

import { privateApiInstance } from "../private-instance";
export const createTrainings = (
  createTrainingsRequest: CreateTrainingsRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<CreateTrainings200>({
    url: `/api/trainer/create-trainings`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createTrainingsRequest,
    signal,
  });
};

export const getCreateTrainingsMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTrainings>>,
    TError,
    { data: CreateTrainingsRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTrainings>>,
  TError,
  { data: CreateTrainingsRequest },
  TContext
> => {
  const mutationKey = ["createTrainings"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTrainings>>,
    { data: CreateTrainingsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createTrainings(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTrainingsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTrainings>>
>;
export type CreateTrainingsMutationBody = CreateTrainingsRequest;
export type CreateTrainingsMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const useCreateTrainings = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTrainings>>,
      TError,
      { data: CreateTrainingsRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTrainings>>,
  TError,
  { data: CreateTrainingsRequest },
  TContext
> => {
  const mutationOptions = getCreateTrainingsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createGyms = (
  createGymsDto: CreateGymsDto,
  signal?: AbortSignal,
) => {
  return privateApiInstance<CreateGyms200>({
    url: `/api/trainer/create-gyms`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createGymsDto,
    signal,
  });
};

export const getCreateGymsMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGyms>>,
    TError,
    { data: CreateGymsDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createGyms>>,
  TError,
  { data: CreateGymsDto },
  TContext
> => {
  const mutationKey = ["createGyms"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createGyms>>,
    { data: CreateGymsDto }
  > = (props) => {
    const { data } = props ?? {};

    return createGyms(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateGymsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGyms>>
>;
export type CreateGymsMutationBody = CreateGymsDto;
export type CreateGymsMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const useCreateGyms = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createGyms>>,
      TError,
      { data: CreateGymsDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createGyms>>,
  TError,
  { data: CreateGymsDto },
  TContext
> => {
  const mutationOptions = getCreateGymsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createGroups = (
  createGroupsDto: CreateGroupsDto,
  signal?: AbortSignal,
) => {
  return privateApiInstance<CreateGroups200>({
    url: `/api/trainer/create-groups`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createGroupsDto,
    signal,
  });
};

export const getCreateGroupsMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createGroups>>,
    TError,
    { data: CreateGroupsDto },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createGroups>>,
  TError,
  { data: CreateGroupsDto },
  TContext
> => {
  const mutationKey = ["createGroups"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createGroups>>,
    { data: CreateGroupsDto }
  > = (props) => {
    const { data } = props ?? {};

    return createGroups(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateGroupsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createGroups>>
>;
export type CreateGroupsMutationBody = CreateGroupsDto;
export type CreateGroupsMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const useCreateGroups = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createGroups>>,
      TError,
      { data: CreateGroupsDto },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createGroups>>,
  TError,
  { data: CreateGroupsDto },
  TContext
> => {
  const mutationOptions = getCreateGroupsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const persistContactInformation = (
  persistContactInformation: PersistContactInformation,
  signal?: AbortSignal,
) => {
  return privateApiInstance<PersistContactInformation200>({
    url: `/api/trainer/persist-contact-information`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: persistContactInformation,
    signal,
  });
};

export const getPersistContactInformationMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof persistContactInformation>>,
    TError,
    { data: PersistContactInformation },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof persistContactInformation>>,
  TError,
  { data: PersistContactInformation },
  TContext
> => {
  const mutationKey = ["persistContactInformation"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof persistContactInformation>>,
    { data: PersistContactInformation }
  > = (props) => {
    const { data } = props ?? {};

    return persistContactInformation(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type PersistContactInformationMutationResult = NonNullable<
  Awaited<ReturnType<typeof persistContactInformation>>
>;
export type PersistContactInformationMutationBody = PersistContactInformation;
export type PersistContactInformationMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const usePersistContactInformation = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof persistContactInformation>>,
      TError,
      { data: PersistContactInformation },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof persistContactInformation>>,
  TError,
  { data: PersistContactInformation },
  TContext
> => {
  const mutationOptions = getPersistContactInformationMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const createSubscriptions = (
  createSubscriptions: CreateSubscriptions,
  signal?: AbortSignal,
) => {
  return privateApiInstance<CreateSubscriptions200>({
    url: `/api/trainer/create-subscriptions`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createSubscriptions,
    signal,
  });
};

export const getCreateSubscriptionsMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createSubscriptions>>,
    TError,
    { data: CreateSubscriptions },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createSubscriptions>>,
  TError,
  { data: CreateSubscriptions },
  TContext
> => {
  const mutationKey = ["createSubscriptions"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createSubscriptions>>,
    { data: CreateSubscriptions }
  > = (props) => {
    const { data } = props ?? {};

    return createSubscriptions(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateSubscriptionsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createSubscriptions>>
>;
export type CreateSubscriptionsMutationBody = CreateSubscriptions;
export type CreateSubscriptionsMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const useCreateSubscriptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createSubscriptions>>,
      TError,
      { data: CreateSubscriptions },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createSubscriptions>>,
  TError,
  { data: CreateSubscriptions },
  TContext
> => {
  const mutationOptions = getCreateSubscriptionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const getTrainerProfile = (signal?: AbortSignal) => {
  return privateApiInstance<TrainerProfile>({
    url: `/api/trainer/me`,
    method: "GET",
    signal,
  });
};

export const getGetTrainerProfileQueryKey = () => {
  return [`/api/trainer/me`] as const;
};

export const getGetTrainerProfileQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getTrainerProfile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTrainerProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrainerProfile>>
  > = ({ signal }) => getTrainerProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTrainerProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTrainerProfileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrainerProfile>>
>;
export type GetTrainerProfileQueryError =
  | InvalidTokenResponse
  | ProfileNotFoundResponse;

export function useGetTrainerProfile<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrainerProfile>>,
          TError,
          Awaited<ReturnType<typeof getTrainerProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrainerProfile<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTrainerProfile>>,
          TError,
          Awaited<ReturnType<typeof getTrainerProfile>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrainerProfile<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTrainerProfile<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTrainerProfileQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetTrainerProfileSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getTrainerProfile>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTrainerProfileQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTrainerProfile>>
  > = ({ signal }) => getTrainerProfile(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getTrainerProfile>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetTrainerProfileSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTrainerProfile>>
>;
export type GetTrainerProfileSuspenseQueryError =
  | InvalidTokenResponse
  | ProfileNotFoundResponse;

export function useGetTrainerProfileSuspense<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrainerProfileSuspense<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetTrainerProfileSuspense<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetTrainerProfileSuspense<
  TData = Awaited<ReturnType<typeof getTrainerProfile>>,
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getTrainerProfile>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetTrainerProfileSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const createTrainerProfile = (
  createTrainerProfileRequest: CreateTrainerProfileRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<TrainerProfileId>({
    url: `/api/trainer/profile`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createTrainerProfileRequest,
    signal,
  });
};

export const getCreateTrainerProfileMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse | ProfileExistsResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTrainerProfile>>,
    TError,
    { data: CreateTrainerProfileRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTrainerProfile>>,
  TError,
  { data: CreateTrainerProfileRequest },
  TContext
> => {
  const mutationKey = ["createTrainerProfile"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTrainerProfile>>,
    { data: CreateTrainerProfileRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createTrainerProfile(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTrainerProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTrainerProfile>>
>;
export type CreateTrainerProfileMutationBody = CreateTrainerProfileRequest;
export type CreateTrainerProfileMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse
  | ProfileExistsResponse;

export const useCreateTrainerProfile = <
  TError = InvalidInputResponse | InvalidTokenResponse | ProfileExistsResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createTrainerProfile>>,
      TError,
      { data: CreateTrainerProfileRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createTrainerProfile>>,
  TError,
  { data: CreateTrainerProfileRequest },
  TContext
> => {
  const mutationOptions = getCreateTrainerProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const deleteTrainerProfile = () => {
  return privateApiInstance<void>({
    url: `/api/trainer/profile`,
    method: "DELETE",
  });
};

export const getDeleteTrainerProfileMutationOptions = <
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTrainerProfile>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTrainerProfile>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["deleteTrainerProfile"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTrainerProfile>>,
    void
  > = () => {
    return deleteTrainerProfile();
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTrainerProfileMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTrainerProfile>>
>;

export type DeleteTrainerProfileMutationError =
  | InvalidTokenResponse
  | ProfileNotFoundResponse;

export const useDeleteTrainerProfile = <
  TError = InvalidTokenResponse | ProfileNotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteTrainerProfile>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteTrainerProfile>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getDeleteTrainerProfileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const scanTrainee = (
  scanTraineeRequest: ScanTraineeRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<ScanTraineeResponse>({
    url: `/api/trainer/scan-qr`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: scanTraineeRequest,
    signal,
  });
};

export const getScanTraineeMutationOptions = <
  TError = InvalidTokenResponse | TraineeNotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scanTrainee>>,
    TError,
    { data: ScanTraineeRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scanTrainee>>,
  TError,
  { data: ScanTraineeRequest },
  TContext
> => {
  const mutationKey = ["scanTrainee"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scanTrainee>>,
    { data: ScanTraineeRequest }
  > = (props) => {
    const { data } = props ?? {};

    return scanTrainee(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScanTraineeMutationResult = NonNullable<
  Awaited<ReturnType<typeof scanTrainee>>
>;
export type ScanTraineeMutationBody = ScanTraineeRequest;
export type ScanTraineeMutationError =
  | InvalidTokenResponse
  | TraineeNotFoundResponse;

export const useScanTrainee = <
  TError = InvalidTokenResponse | TraineeNotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scanTrainee>>,
      TError,
      { data: ScanTraineeRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scanTrainee>>,
  TError,
  { data: ScanTraineeRequest },
  TContext
> => {
  const mutationOptions = getScanTraineeMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const scanAndCreateTraining = (
  scanAndCreateRequest: ScanAndCreateRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<CreateTrainingResponse>({
    url: `/api/trainer/scan-qr-and-create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: scanAndCreateRequest,
    signal,
  });
};

export const getScanAndCreateTrainingMutationOptions = <
  TError = InvalidTokenResponse | TraineeNotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof scanAndCreateTraining>>,
    TError,
    { data: ScanAndCreateRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof scanAndCreateTraining>>,
  TError,
  { data: ScanAndCreateRequest },
  TContext
> => {
  const mutationKey = ["scanAndCreateTraining"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof scanAndCreateTraining>>,
    { data: ScanAndCreateRequest }
  > = (props) => {
    const { data } = props ?? {};

    return scanAndCreateTraining(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ScanAndCreateTrainingMutationResult = NonNullable<
  Awaited<ReturnType<typeof scanAndCreateTraining>>
>;
export type ScanAndCreateTrainingMutationBody = ScanAndCreateRequest;
export type ScanAndCreateTrainingMutationError =
  | InvalidTokenResponse
  | TraineeNotFoundResponse;

export const useScanAndCreateTraining = <
  TError = InvalidTokenResponse | TraineeNotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof scanAndCreateTraining>>,
      TError,
      { data: ScanAndCreateRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof scanAndCreateTraining>>,
  TError,
  { data: ScanAndCreateRequest },
  TContext
> => {
  const mutationOptions = getScanAndCreateTrainingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const attachToExistingTraining = (
  attachToTrainingRequest: AttachToTrainingRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<AttachToTrainingResponse>({
    url: `/api/trainer/attach-to-existing`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: attachToTrainingRequest,
    signal,
  });
};

export const getAttachToExistingTrainingMutationOptions = <
  TError =
    | InvalidTokenResponse
    | InvalidTrainingAccessResponse
    | TraineeNotFoundResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof attachToExistingTraining>>,
    TError,
    { data: AttachToTrainingRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof attachToExistingTraining>>,
  TError,
  { data: AttachToTrainingRequest },
  TContext
> => {
  const mutationKey = ["attachToExistingTraining"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof attachToExistingTraining>>,
    { data: AttachToTrainingRequest }
  > = (props) => {
    const { data } = props ?? {};

    return attachToExistingTraining(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AttachToExistingTrainingMutationResult = NonNullable<
  Awaited<ReturnType<typeof attachToExistingTraining>>
>;
export type AttachToExistingTrainingMutationBody = AttachToTrainingRequest;
export type AttachToExistingTrainingMutationError =
  | InvalidTokenResponse
  | InvalidTrainingAccessResponse
  | TraineeNotFoundResponse;

export const useAttachToExistingTraining = <
  TError =
    | InvalidTokenResponse
    | InvalidTrainingAccessResponse
    | TraineeNotFoundResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof attachToExistingTraining>>,
      TError,
      { data: AttachToTrainingRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof attachToExistingTraining>>,
  TError,
  { data: AttachToTrainingRequest },
  TContext
> => {
  const mutationOptions = getAttachToExistingTrainingMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
