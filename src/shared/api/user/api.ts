/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * User Roles API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery, useSuspenseQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";

import type {
  InitializeRoleRequest,
  InitializeRoleResponse,
  InvalidInputResponse,
  InvalidRoleResponse,
  InvalidTokenResponse,
  OnboardingResponse,
  UpdateLanguageRequest,
  UpdateRoleRequest,
  UpdateUserLanguage200,
  UpdateUserRole200,
  UserResponse,
} from "./types";

import { privateApiInstance } from "../private-instance";
export const getCurrentUser = (signal?: AbortSignal) => {
  return privateApiInstance<UserResponse>({
    url: `/api/users/me`,
    method: "GET",
    signal,
  });
};

export const getGetCurrentUserQueryKey = () => {
  return [`/api/users/me`] as const;
};

export const getGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({
    signal,
  }) => getCurrentUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUser>>
>;
export type GetCurrentUserQueryError = InvalidTokenResponse;

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUser>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUser>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCurrentUser<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCurrentUser>>, TError, TData>
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCurrentUserSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getCurrentUser>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCurrentUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUser>>> = ({
    signal,
  }) => getCurrentUser(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getCurrentUser>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCurrentUserSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentUser>>
>;
export type GetCurrentUserSuspenseQueryError = InvalidTokenResponse;

export function useGetCurrentUserSuspense<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserSuspense<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCurrentUserSuspense<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetCurrentUserSuspense<
  TData = Awaited<ReturnType<typeof getCurrentUser>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getCurrentUser>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCurrentUserSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getUserOnboarding = (signal?: AbortSignal) => {
  return privateApiInstance<OnboardingResponse>({
    url: `/api/users/me/onboarding`,
    method: "GET",
    signal,
  });
};

export const getGetUserOnboardingQueryKey = () => {
  return [`/api/users/me/onboarding`] as const;
};

export const getGetUserOnboardingQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getUserOnboarding>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserOnboardingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserOnboarding>>
  > = ({ signal }) => getUserOnboarding(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserOnboarding>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserOnboardingQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserOnboarding>>
>;
export type GetUserOnboardingQueryError = InvalidTokenResponse;

export function useGetUserOnboarding<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserOnboarding>>,
          TError,
          Awaited<ReturnType<typeof getUserOnboarding>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserOnboarding<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserOnboarding>>,
          TError,
          Awaited<ReturnType<typeof getUserOnboarding>>
        >,
        "initialData"
      >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserOnboarding<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUserOnboarding<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserOnboardingQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetUserOnboardingSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getUserOnboarding>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserOnboardingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserOnboarding>>
  > = ({ signal }) => getUserOnboarding(signal);

  return { queryKey, queryFn, ...queryOptions } as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getUserOnboarding>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetUserOnboardingSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserOnboarding>>
>;
export type GetUserOnboardingSuspenseQueryError = InvalidTokenResponse;

export function useGetUserOnboardingSuspense<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserOnboardingSuspense<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetUserOnboardingSuspense<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};

export function useGetUserOnboardingSuspense<
  TData = Awaited<ReturnType<typeof getUserOnboarding>>,
  TError = InvalidTokenResponse,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getUserOnboarding>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetUserOnboardingSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateUserLanguage = (
  updateLanguageRequest: UpdateLanguageRequest,
) => {
  return privateApiInstance<UpdateUserLanguage200>({
    url: `/api/users/me/lang`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateLanguageRequest,
  });
};

export const getUpdateUserLanguageMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserLanguage>>,
    TError,
    { data: UpdateLanguageRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserLanguage>>,
  TError,
  { data: UpdateLanguageRequest },
  TContext
> => {
  const mutationKey = ["updateUserLanguage"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserLanguage>>,
    { data: UpdateLanguageRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserLanguage(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserLanguageMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserLanguage>>
>;
export type UpdateUserLanguageMutationBody = UpdateLanguageRequest;
export type UpdateUserLanguageMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const useUpdateUserLanguage = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserLanguage>>,
      TError,
      { data: UpdateLanguageRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserLanguage>>,
  TError,
  { data: UpdateLanguageRequest },
  TContext
> => {
  const mutationOptions = getUpdateUserLanguageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const updateUserRole = (updateRoleRequest: UpdateRoleRequest) => {
  return privateApiInstance<UpdateUserRole200>({
    url: `/api/users/me/role`,
    method: "PATCH",
    headers: { "Content-Type": "application/json" },
    data: updateRoleRequest,
  });
};

export const getUpdateUserRoleMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse | InvalidRoleResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUserRole>>,
    TError,
    { data: UpdateRoleRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateUserRole>>,
  TError,
  { data: UpdateRoleRequest },
  TContext
> => {
  const mutationKey = ["updateUserRole"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUserRole>>,
    { data: UpdateRoleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateUserRole(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateUserRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUserRole>>
>;
export type UpdateUserRoleMutationBody = UpdateRoleRequest;
export type UpdateUserRoleMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse
  | InvalidRoleResponse;

export const useUpdateUserRole = <
  TError = InvalidInputResponse | InvalidTokenResponse | InvalidRoleResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateUserRole>>,
      TError,
      { data: UpdateRoleRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateUserRole>>,
  TError,
  { data: UpdateRoleRequest },
  TContext
> => {
  const mutationOptions = getUpdateUserRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const initializeUserRole = (
  initializeRoleRequest: InitializeRoleRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<InitializeRoleResponse>({
    url: `/api/users/me/role/init`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: initializeRoleRequest,
    signal,
  });
};

export const getInitializeUserRoleMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof initializeUserRole>>,
    TError,
    { data: InitializeRoleRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof initializeUserRole>>,
  TError,
  { data: InitializeRoleRequest },
  TContext
> => {
  const mutationKey = ["initializeUserRole"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof initializeUserRole>>,
    { data: InitializeRoleRequest }
  > = (props) => {
    const { data } = props ?? {};

    return initializeUserRole(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type InitializeUserRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof initializeUserRole>>
>;
export type InitializeUserRoleMutationBody = InitializeRoleRequest;
export type InitializeUserRoleMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const useInitializeUserRole = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof initializeUserRole>>,
      TError,
      { data: InitializeRoleRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof initializeUserRole>>,
  TError,
  { data: InitializeRoleRequest },
  TContext
> => {
  const mutationOptions = getInitializeUserRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
