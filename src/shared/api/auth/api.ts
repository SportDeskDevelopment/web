/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Authentication API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import type {
  AuthResponseResponse,
  ConfirmEmailRequest,
  ConfirmEmailResponseResponse,
  EmailExistsResponse,
  EmailNotConfirmedResponse,
  GoogleAuthRequest,
  InvalidCodeResponse,
  InvalidCredentialsResponse,
  InvalidInputResponse,
  InvalidTokenResponse,
  LoginRequest,
  LogoutAllDevices200,
  LogoutUser200,
  RegisterRequest,
  RegisterResponseResponse,
  UserNotFoundResponse,
} from "./types";

import { privateApiInstance } from "../private-instance";
export const registerUser = (
  registerRequest: RegisterRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<RegisterResponseResponse>({
    url: `/api/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: registerRequest,
    signal,
  });
};

export const getRegisterUserMutationOptions = <
  TError = InvalidInputResponse | EmailExistsResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof registerUser>>,
    TError,
    { data: RegisterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof registerUser>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationKey = ["registerUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof registerUser>>,
    { data: RegisterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return registerUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type RegisterUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof registerUser>>
>;
export type RegisterUserMutationBody = RegisterRequest;
export type RegisterUserMutationError =
  | InvalidInputResponse
  | EmailExistsResponse;

export const useRegisterUser = <
  TError = InvalidInputResponse | EmailExistsResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof registerUser>>,
      TError,
      { data: RegisterRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof registerUser>>,
  TError,
  { data: RegisterRequest },
  TContext
> => {
  const mutationOptions = getRegisterUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const confirmEmail = (
  confirmEmailRequest: ConfirmEmailRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<ConfirmEmailResponseResponse>({
    url: `/api/auth/confirm-email`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: confirmEmailRequest,
    signal,
  });
};

export const getConfirmEmailMutationOptions = <
  TError = InvalidInputResponse | UserNotFoundResponse | InvalidCodeResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof confirmEmail>>,
    TError,
    { data: ConfirmEmailRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof confirmEmail>>,
  TError,
  { data: ConfirmEmailRequest },
  TContext
> => {
  const mutationKey = ["confirmEmail"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof confirmEmail>>,
    { data: ConfirmEmailRequest }
  > = (props) => {
    const { data } = props ?? {};

    return confirmEmail(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ConfirmEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof confirmEmail>>
>;
export type ConfirmEmailMutationBody = ConfirmEmailRequest;
export type ConfirmEmailMutationError =
  | InvalidInputResponse
  | UserNotFoundResponse
  | InvalidCodeResponse;

export const useConfirmEmail = <
  TError = InvalidInputResponse | UserNotFoundResponse | InvalidCodeResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof confirmEmail>>,
      TError,
      { data: ConfirmEmailRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof confirmEmail>>,
  TError,
  { data: ConfirmEmailRequest },
  TContext
> => {
  const mutationOptions = getConfirmEmailMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const loginUser = (loginRequest: LoginRequest, signal?: AbortSignal) => {
  return privateApiInstance<AuthResponseResponse>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginRequest,
    signal,
  });
};

export const getLoginUserMutationOptions = <
  TError =
    | InvalidInputResponse
    | InvalidCredentialsResponse
    | EmailNotConfirmedResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["loginUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginUser>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return loginUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserMutationBody = LoginRequest;
export type LoginUserMutationError =
  | InvalidInputResponse
  | InvalidCredentialsResponse
  | EmailNotConfirmedResponse;

export const useLoginUser = <
  TError =
    | InvalidInputResponse
    | InvalidCredentialsResponse
    | EmailNotConfirmedResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginUser>>,
      TError,
      { data: LoginRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getLoginUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const refreshToken = (signal?: AbortSignal) => {
  return privateApiInstance<AuthResponseResponse>({
    url: `/api/auth/refresh`,
    method: "POST",
    signal,
  });
};

export const getRefreshTokenMutationOptions = <
  TError = InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshToken>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["refreshToken"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshToken>>,
    void
  > = () => {
    return refreshToken();
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshToken>>
>;

export type RefreshTokenMutationError = InvalidTokenResponse;

export const useRefreshToken = <
  TError = InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshToken>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshToken>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getRefreshTokenMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const googleAuth = (
  googleAuthRequest: GoogleAuthRequest,
  signal?: AbortSignal,
) => {
  return privateApiInstance<AuthResponseResponse>({
    url: `/api/auth/google`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: googleAuthRequest,
    signal,
  });
};

export const getGoogleAuthMutationOptions = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof googleAuth>>,
    TError,
    { data: GoogleAuthRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof googleAuth>>,
  TError,
  { data: GoogleAuthRequest },
  TContext
> => {
  const mutationKey = ["googleAuth"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof googleAuth>>,
    { data: GoogleAuthRequest }
  > = (props) => {
    const { data } = props ?? {};

    return googleAuth(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type GoogleAuthMutationResult = NonNullable<
  Awaited<ReturnType<typeof googleAuth>>
>;
export type GoogleAuthMutationBody = GoogleAuthRequest;
export type GoogleAuthMutationError =
  | InvalidInputResponse
  | InvalidTokenResponse;

export const useGoogleAuth = <
  TError = InvalidInputResponse | InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof googleAuth>>,
      TError,
      { data: GoogleAuthRequest },
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof googleAuth>>,
  TError,
  { data: GoogleAuthRequest },
  TContext
> => {
  const mutationOptions = getGoogleAuthMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const logoutUser = (signal?: AbortSignal) => {
  return privateApiInstance<LogoutUser200>({
    url: `/api/auth/logout`,
    method: "POST",
    signal,
  });
};

export const getLogoutUserMutationOptions = <
  TError = InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logoutUser>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logoutUser>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["logoutUser"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logoutUser>>,
    void
  > = () => {
    return logoutUser();
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof logoutUser>>
>;

export type LogoutUserMutationError = InvalidTokenResponse;

export const useLogoutUser = <
  TError = InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof logoutUser>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof logoutUser>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};

export const logoutAllDevices = (signal?: AbortSignal) => {
  return privateApiInstance<LogoutAllDevices200>({
    url: `/api/auth/logout-all`,
    method: "POST",
    signal,
  });
};

export const getLogoutAllDevicesMutationOptions = <
  TError = InvalidTokenResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof logoutAllDevices>>,
    TError,
    void,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof logoutAllDevices>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ["logoutAllDevices"];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof logoutAllDevices>>,
    void
  > = () => {
    return logoutAllDevices();
  };

  return { mutationFn, ...mutationOptions };
};

export type LogoutAllDevicesMutationResult = NonNullable<
  Awaited<ReturnType<typeof logoutAllDevices>>
>;

export type LogoutAllDevicesMutationError = InvalidTokenResponse;

export const useLogoutAllDevices = <
  TError = InvalidTokenResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof logoutAllDevices>>,
      TError,
      void,
      TContext
    >;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof logoutAllDevices>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getLogoutAllDevicesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
